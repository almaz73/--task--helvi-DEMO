/**
 *  type {String} [fio|address|email]
 */
/** count {Number} количество подсказок */

import './index.css'

import React, {Component} from 'react'
import {connect} from 'react-redux'
import {changeCombo} from 'action'


class Combo extends Component {

   constructor (props) {
      super (props)
      this.state = {
         active: false,
         changedEl: -1 // выбранный вариант подсказки
      }
   }

   onInputChange (val) {
      this.props.changeCombo (
         (val == null) ? '' : this.refs.inp.value,
         this.props.type,
         (this.props.count) ? +this.props.count : 4,
      )
   }

   onMouseLeave () {
      this.onInputChange (null)
   }

   onFocus () {
      this.setState ({active: true})
   }

   onBlur () {
      this.setState ({active: false})
   }

   onChose (val) {
      this.refs.inp.value = val
      this.onInputChange (null)
   }

   /**
    * выбраем вариант на клавиатуре
    */
   onKeyDown (event) {
      if (event.keyCode === 40) {
         let changed = ++this.state.changedEl;
         if (changed > +this.props.count - 1) changed = +this.props.count - 1
         this.setState ({changedEl: changed})
      }
      if (event.keyCode === 38) {
         let changed = --this.state.changedEl;
         if (changed < -1) changed = -1
         this.setState ({changedEl: changed})
      }
      if (event.keyCode === 13) {
         this.onChose (this.props.state.combo[this.state.changedEl])
         this.setState ({changedEl: -1})
      }
   }

   onMouseOverDown () {
      console.log (" val =wwww ");

      this.setState ({changedEl: -1})
   }

   render () {

      const {combo} = this.props.state
      let visibleDownClass = (this.state.active && combo.length > 0) ? "combobox-down" : "combobox-down combobox-down-hide";
      let divStyle = {width: this.props.width}

      return (
         <div
            onKeyDown={this.onKeyDown.bind (this)}
            onFocus={this.onFocus.bind (this)}
            style={divStyle}
            className="combobox"
            onBlur={this.onBlur.bind (this)}
            onMouseLeave={this.onMouseLeave.bind (this)}>
            <input

               className="combobox-input"
               ref="inp"
               type='text'
               onChange={this.onInputChange.bind (this)}
               placeholder={this.props.placeholder}
            />
            <div className={visibleDownClass}>
               {
                  this.state.active &&
                  combo &&
                  combo.map &&
                  combo.map ((el, index) => {
                     let buttonClass = this.state.changedEl === index ? 'combobox-down-active' : '';
                     return (
                        <div
                           key={index}
                           className={buttonClass}
                           onMouseOver={this.onMouseOverDown.bind (this, el)}
                           onMouseDown={this.onChose.bind (this, el)}
                        >{el}</div>
                     )
                  })}
            </div>
         </div>
      )
   }
}

const mapStateToProps = state => ({state})
const mapDispatchWithProps = {changeCombo}


export default connect (mapStateToProps, mapDispatchWithProps) (Combo)

//
// Combo.propTypes = {
//    type: React.PropTypes.string,
//    count: React.PropTypes.string,
//    placeholder: React.PropTypes.string,
// };